{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAeA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAQ,CAAEJ,WAAUC,S,GAErBA,E,IAvBMO,SAASC,cAAc,SAC/BC,iBAAiB,UACtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAK,IAAIC,EAAI,EAAGA,GAAKC,OAAQD,GAAK,EAChCd,EAAcc,EAAGZ,OAChBc,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUiB,EAAKD,EAALf,MACjBiB,EAAArB,GAASsB,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANJ,EAAM,M,IAEtEK,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUiB,EAAKD,EAALf,MACnBiB,EAAArB,GAASsB,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANJ,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onFormSubmit);\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n     })\n     .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  }\n}; \nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject ({ position, delay })\n      };\n    }, delay);\n  }); \n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","evt","preventDefault","i","amount","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c7111fbc.js.map"}